call plug#begin('~/.vim/plugged2')
  "Plug 'christoomey/vim-tmux-navigator'

  "" file explorer -- install font `Monaco Nerd Font` from https://github.com/Karmenzind/monaco-nerd-fonts
  Plug 'nvim-tree/nvim-web-devicons'
  Plug 'nvim-tree/nvim-tree.lua'
  Plug 'simeji/winresizer'

  Plug 'christoomey/vim-tmux-navigator'
  Plug 'easymotion/vim-easymotion'
  Plug 'neovim/nvim-lspconfig'
  "commenting with <leadier>ci
  Plug 'scrooloose/nerdcommenter'
  Plug 'mhartington/formatter.nvim'
  Plug 'mfussenegger/nvim-lint'
  " surround text - in visual mode press `S` on selected text and press surrounding char
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-repeat'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'windwp/nvim-autopairs'

  " Use release branch (recommended)
  " coc-prettier, coc-git, coc-json, coc-elixir, coc-rls, coc-snippets,
  " coc-webview, coc-markdown-preview-enhanced
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'elixir-lsp/coc-elixir', {'do': 'yarn install && yarn prepack'}


  "" syntax highligting
	Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

  "" Fuzzy searching
	Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }
	Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.1' }

  "" Theme
  Plug 'patstockwell/vim-monokai-tasty'

  "" Comand prompt and popups
  Plug 'folke/noice.nvim'
  Plug 'MunifTanjim/nui.nvim'

  Plug 'aduros/ai.vim'
call plug#end()

lua << EOF
  vim.g.loaded_netrw = 1
  vim.g.loaded_netrwPlugin = 1

  -- set termguicolors to enable highlight groups
  vim.opt.termguicolors = true

  -- empty setup using defaults
  require("nvim-tree").setup()
  require("nvim-autopairs").setup {}
  require("noice").setup()

  require'nvim-treesitter.configs'.setup {
    highlight = {
      enable = true,
      -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
      -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
      -- Using this option may slow down your editor, and you may see some duplicate highlights.
      -- Instead of true it can also be a list of languages
      additional_vim_regex_highlighting = false,
    },
  }
EOF

let mapleader = ","

map <Leader>n :NvimTreeToggle<CR>
map <Leader>w :WinResizerStartResize<CR>

" Disable Ex mode
nnoremap Q <Nop>
nnoremap H gT
nnoremap L gt

set number            " Show line numbers
set ruler             " Show line and column number
set cursorline              " Highlight current line
set scrolloff=5             " Start scrolling n lines before horizontal border of window.
set sidescrolloff=7         " Start scrolling n chars before end of screen.
set sidescroll=1            " The minimal number of columns to scroll
set clipboard^=unnamed,unnamedplus

""
"" filetype aliases for highlighting
""
autocmd BufEnter *.zok :setlocal filetype=solidity

""
"" Markdown preview mapping to `,mp`
""
nnoremap <silent> <leader>mp :<C-u>CocCommand markdown-preview-enhanced.openPreview<CR>

""
"" Whitespace
""
set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode

""
"" Theme
""
let g:vim_monokai_tasty_machine_tint = 1
colorscheme vim-monokai-tasty
let g:airline_theme='base16_spacemacs'
let g:airline#extensions#tabline#enabled = 1

""
"" Treesitter
""
"" tree-sitter -- folding options
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
set nofoldenable

""
"" Telescop searching
""
" Telescop Using Lua functions
nnoremap <leader>ff <cmd>lua require('telescope.builtin').find_files()<cr>
nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>

""
"" Coc settings
""
inoremap <silent><expr> <c-space> coc#refresh()

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')
